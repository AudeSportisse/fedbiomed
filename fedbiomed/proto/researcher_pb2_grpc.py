# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from fedbiomed.proto import researcher_pb2 as fedbiomed_dot_proto_dot_researcher__pb2


class ResearcherServiceStub(object):
    """import "google/protobuf/any.proto";

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTask = channel.stream_stream(
                '/ResearcherService/GetTask',
                request_serializer=fedbiomed_dot_proto_dot_researcher__pb2.TaskRequest.SerializeToString,
                response_deserializer=fedbiomed_dot_proto_dot_researcher__pb2.TaskResponse.FromString,
                )
        self.GetTaskUnary = channel.unary_stream(
                '/ResearcherService/GetTaskUnary',
                request_serializer=fedbiomed_dot_proto_dot_researcher__pb2.TaskRequest.SerializeToString,
                response_deserializer=fedbiomed_dot_proto_dot_researcher__pb2.TaskResponse.FromString,
                )
        self.FeedBack = channel.stream_unary(
                '/ResearcherService/FeedBack',
                request_serializer=fedbiomed_dot_proto_dot_researcher__pb2.FeedBackMessage.SerializeToString,
                response_deserializer=fedbiomed_dot_proto_dot_researcher__pb2.Empty.FromString,
                )


class ResearcherServiceServicer(object):
    """import "google/protobuf/any.proto";

    """

    def GetTask(self, request_iterator, context):
        """Gettask streaming API
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskUnary(self, request, context):
        """Unary RPC long-lived polling
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FeedBack(self, request_iterator, context):
        """Node logs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResearcherServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTask': grpc.stream_stream_rpc_method_handler(
                    servicer.GetTask,
                    request_deserializer=fedbiomed_dot_proto_dot_researcher__pb2.TaskRequest.FromString,
                    response_serializer=fedbiomed_dot_proto_dot_researcher__pb2.TaskResponse.SerializeToString,
            ),
            'GetTaskUnary': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTaskUnary,
                    request_deserializer=fedbiomed_dot_proto_dot_researcher__pb2.TaskRequest.FromString,
                    response_serializer=fedbiomed_dot_proto_dot_researcher__pb2.TaskResponse.SerializeToString,
            ),
            'FeedBack': grpc.stream_unary_rpc_method_handler(
                    servicer.FeedBack,
                    request_deserializer=fedbiomed_dot_proto_dot_researcher__pb2.FeedBackMessage.FromString,
                    response_serializer=fedbiomed_dot_proto_dot_researcher__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ResearcherService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ResearcherService(object):
    """import "google/protobuf/any.proto";

    """

    @staticmethod
    def GetTask(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/ResearcherService/GetTask',
            fedbiomed_dot_proto_dot_researcher__pb2.TaskRequest.SerializeToString,
            fedbiomed_dot_proto_dot_researcher__pb2.TaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskUnary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ResearcherService/GetTaskUnary',
            fedbiomed_dot_proto_dot_researcher__pb2.TaskRequest.SerializeToString,
            fedbiomed_dot_proto_dot_researcher__pb2.TaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FeedBack(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/ResearcherService/FeedBack',
            fedbiomed_dot_proto_dot_researcher__pb2.FeedBackMessage.SerializeToString,
            fedbiomed_dot_proto_dot_researcher__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
