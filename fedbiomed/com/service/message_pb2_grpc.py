# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import service.message_pb2 as message__pb2


class FLOrchestratorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PollExperiment = channel.unary_unary(
                '/FLOrchestrator/PollExperiment',
                request_serializer=message__pb2.PollExperimentRequest.SerializeToString,
                response_deserializer=message__pb2.PollExperimentResponse.FromString,
                )
        self.OpenStream = channel.stream_stream(
                '/FLOrchestrator/OpenStream',
                request_serializer=message__pb2.Message.SerializeToString,
                response_deserializer=message__pb2.Message.FromString,
                )


class FLOrchestratorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PollExperiment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FLOrchestratorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PollExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.PollExperiment,
                    request_deserializer=message__pb2.PollExperimentRequest.FromString,
                    response_serializer=message__pb2.PollExperimentResponse.SerializeToString,
            ),
            'OpenStream': grpc.stream_stream_rpc_method_handler(
                    servicer.OpenStream,
                    request_deserializer=message__pb2.Message.FromString,
                    response_serializer=message__pb2.Message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FLOrchestrator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FLOrchestrator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PollExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FLOrchestrator/PollExperiment',
            message__pb2.PollExperimentRequest.SerializeToString,
            message__pb2.PollExperimentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/FLOrchestrator/OpenStream',
            message__pb2.Message.SerializeToString,
            message__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
