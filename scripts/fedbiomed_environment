#!/bin/bash
#
# configure a development environment for each component (network, node, researcher)
#

#
# find the directory containing all sources
#
# this works then source this file !!!!
#
# detect how the file is run
(return 0 2>/dev/null) && sourced=1 || sourced=0
if [ "${sourced}" == "0" ]
then
    echo "This file MUST be sourced (and not executed) to benefit from the environment"
    exit -1
fi

#Activate conda with any of the next commands
#source ~/miniconda3/bin/activate
#source ~/.bashrc
eval "$(conda shell.bash hook)"

#
# helpers
#
environment_printvar() {
    if [ -z "$2" ]
    then
        echo "$1: None"
    else
        echo "$1: $2"
    fi
}

environment_info() {
    environment_printvar "Conda   env" "${CONDA_DEFAULT_ENV}"
    environment_printvar "Python  env" "${PYTHONPATH}"
    environment_printvar "MQTT   host" "${MQTT_BROKER}"
    environment_printvar "MQTT   port" "${MQTT_BROKER_PORT}"
    environment_printvar "UPLOADS url" "${UPLOADS_URL}"
}

development_env() {
    export MQTT_BROKER=localhost
    export MQTT_BROKER_PORT=1883
    export UPLOADS_URL='http://localhost:8844/upload/'
}

environment_reset() {
    verbose=$1
    [[ ! -z "$verbose" ]] && echo "** Deactivating all environment"
    conda deactivate
    unset PYTHONPATH
    unset MQTT_BROKER
    unset MQTT_BROKER_PORT
    unset UPLOADS_URL
    [[ ! -z "$verbose" ]] && environment_info
}

activate_network() {
    verbose=$1
    [[ ! -z "$verbose" ]] && echo "** Activating fedbiomed-network environment"
    conda activate fedbiomed-network
    unset PYTHONPATH
    [[ ! -z "$verbose" ]] && environment_info
}

activate_node() {
    verbose=$1
    [[ ! -z "$verbose" ]] && echo "** Activating fedbiomed-node environment"
    conda activate fedbiomed-node
    export PYTHONPATH=$basedir/fedbiomed-node
    [[ ! -z "$verbose" ]] && environment_info
}

activate_researcher() {
    verbose=$1
    [[ ! -z "$verbose" ]] && echo "** Activating fedbiomed-researcher environment"
    conda activate fedbiomed-researcher
    export PYTHONPATH=$basedir/fedbiomed-researcher:$basedir/fedbiomed-node
    [[ ! -z "$verbose" ]] && environment_info
}


#
# main
#
script=${BASH_SOURCE[0]}
basedir=$(cd $(dirname $script)/../.. || exit ; pwd)

# initialize development environment for....
case $1 in

    clean)
        environment_reset
        activate_network
        echo "** Cleaning all caches / temporary files"
        # docker containers
        (cd ${basedir}/fedbiomed-network/envs/development/network/ &&  echo " * Docker cleaning" )

        # node/researcher cleaners
        environment_reset
        activate_node
        if [ -f ${basedir}/fedbiomed-node/scripts/clean.py ]
        then
            echo " * Node cleaning"
            python ${basedir}/fedbiomed-node/scripts/clean.py
        fi

        environment_reset
        activate_researcher
        if [ -f ${basedir}/fedbiomed-researcher/scripts/clean.py ]
        then
            echo " * Researcher cleaning"
            python ${basedir}/fedbiomed-researcher/scripts/clean.py
        fi
        ;;

    reset)
        conda deactivate
        environment_reset verbose
        ;;

    network)
        conda deactivate
        environment_reset
        activate_network verbose
        ;;

    node)
        conda deactivate
        environment_reset
        development_env
        activate_node verbose
        ;;

    researcher)
        conda deactivate
        environment_reset
        development_env
        activate_researcher verbose
        ;;

    *)
        cat <<EOF
Usage: fedbiomed_environment network|node|researcher|reset|clean

Please specify:
- network, node, researcher : to activate an environment
- reset                     : to leave the current environment
- clean                     : to clean all caches, tempo files,...
EOF
        ;;
esac
