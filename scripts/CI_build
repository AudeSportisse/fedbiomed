#!/bin/bash

#
# Continuous integration build script
# for fedbiomed-v3-linux job on ci.inria.fr/fedbiomed
#


# Set variables for the build
set_variables() {

    TRIGGER_REPO=$(basename "$gitlabSourceRepoHomepage")
    echo "INFO: trigger repo for merge $TRIGGER_REPO"   

    SRC_BRANCH=$gitlabBranch
    echo "INFO: source branch for merge $SRC_BRANCH"    

    TARGET_BRANCH=$gitlabTargetBranch
    echo "INFO: target branch for merge $TARGET_BRANCH" 

    BASE_REPO=fedbiomed-network
    echo "INFO: base repository for build $BASE_REPO"   

    OTHER_REPOS='fedbiomed-node fedbiomed-researcher'
    echo "INFO: other repositories for build $OTHER_REPOS"  

    BASE_PATH=$PWD
    echo "INFO: basepath for repo clones $BASE_PATH"  
}

# Do some cleaning
do_clean() {
    LEVEL=$1
    [ -n "$LEVEL" ] || LEVEL=1

    cd $BASE_PATH
    if [ "$LEVEL" -ge 0 ] ; then
        # remove clones of non-default repos
        for r in $OTHER_REPOS ; do
            if [ -d "$r" ] ; then
            	rm -rf $r
            fi
        done
    fi
}

# Do or update local clone of repos not managed by jenkins
do_clones() {

    # should have cloned fedbiomed-network
    if [ "$(basename ${GIT_URL%%.git})" != "$BASE_REPO" ] ; then
        echo "ERROR: expect cloned repo $BASE_REPO not $(basename ${GIT_URL%%.git})"
        exit 1
    fi

    # clone / update
    cd $BASE_PATH
    for repo in $OTHER_REPOS ; do
        if [ ! -d "$repo" ] ; then
            url=${GIT_URL%%${BASE_REPO}.git}${repo}.git
            git clone $url
            if [ "$?" -ne 0 ] ; then
                echo "ERROR: error code $? when cloning $url"
                exit 1
            fi
        fi
        cd $repo
        git fetch -p
        cd $BASE_PATH
    done

}

set_clones_branch() {

	cd $BASE_PATH/$BASE_REPO

    
    for repo in $BASE_REPO $OTHER_REPOS ; do
    	if [ "$repo" = "$BASE_REPO" -a "$BASE_REPO" = "$TRIGGER_REPO" ] ; then
        	# when merging in a clone managed by jenkins, do not change branch
            # redundant + sometimes causes build to fail
            echo "INFO: branch in $repo is $(git branch)"
            continue
        fi
        
    	cd $BASE_PATH/$repo
        # we cannot count on source branch existing in all three repos
        # try reasonable choice of branches for merge
        if [ -n "$(git branch -r --list origin/$SRC_BRANCH)" ] ; then
    		# prefered branch for build is source branch of merge
            # - exists for triggering repo
            # - may exist or not for other repos
            branch=$SRC_BRANCH
    	elif [ -n "$(git branch -r --list origin/$TARGET_BRANCH)" ] ; then
        	# second choice for build is target branch of merge
            # - should exists on every repo (develop, master) unless specific merge
            branch=$TARGET_BRANCH
        else
        	branch=develop 
        fi
        
        git config pull.rebase false
        git checkout $branch
        git pull
        
        echo "INFO: branch in $repo is $(git branch --show-current)"
    done

	cd $BASE_PATH
}


set_variables
do_clean 1
do_clones
set_clones_branch

echo "INFO: successful dummy CI build"
exit 0


