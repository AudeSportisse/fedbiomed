#!/usr/bin/env bash
#
# wrapper to all vpn containers commands
#
#

# detect how the file is run
([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] ||
 [[ -n $KSH_VERSION && $(cd "$(dirname -- "$0")" &&
    printf '%s' "${PWD%/}/")$(basename -- "$0") != "${.sh.file}" ]] ||
 [[ -n $BASH_VERSION ]] && (return 0 2>/dev/null)) && sourced=1 || sourced=0

[[ "${sourced}" == "1" ]] && echo "This file MUST NOT be sourced" && return


# all functions
# -------------
usage() {
    #
    # print usage
    #
    echo "\
Usage: ${0##*/} build     [-c|--clean] [-g|--gpu] [CONTAINER..]
       ${0##*/} configure                         [CONTAINER..]
       ${0##*/} start     [-m|--model-approval]   [CONTAINER..]
       ${0##*/} status
       ${0##*/} stop

Build/configure/run/stop docker containers for VPN support
(cannot build / configure / start / stop at same time)

[CONTAINER..] is a list of containers to configure/build/run.
This list may contain: vpnserver, mqtt, restful, node

 build           build all containers

     Optional with build:

     -c|--clean  clean environments first
     -g|--gpu    build docker containers with GPU support

 configure       generate configuration files

 start       start all components
 status      give information on running containers
 stop        stop  all components

     Optional with start:

     -m|--model-approval  enforce model approval in config files
"
}

internal_find_my_ip() {

    algo=$1
    # heuristically test some commands to find my "external" IP

    case $1 in
        1)
            # linux/unixes
            _IP=$(hostname -I 2>/dev/null | sed -e 's:\ .*$::')
            ;;
        2)
            # linux again using ip command
            _IP=$(ip -brief address 2>/dev/null | grep UP | head -1 | awk '{print $3}' | sed -e 's:/.*::')
            ;;
        3)
            _IP=$(ip route get 1.2.3.4 2>/dev/null | head -1 | awk '{print $7}')
            ;;
        4)
            # other cases using ifconfig command
            _IP=$(ifconfig eth0 2> /dev/null| grep 'inet '| awk '{print $2}')
            ;;
        5)
            _IP=$(ifconfig en0 2> /dev/null| grep 'inet '| awk '{print $2}')
            ;;
        6)
            # check also wireless
            _IP=$(ifconfig wlan0 2> /dev/null| grep 'inet '| awk '{print $2}')
            ;;
        #
        # you may add more heuristics here
        #
        *|'')
            # always true, even if not the best choice
            _IP="127.0.0.1"
            ;;
    esac

    # verify that the result is an IPv4 adress
    _IP=$(echo $_IP | egrep '([0-9]{1,3}[\.]){3}[0-9]{1,3}')

    echo $_IP
}

find_my_ip() {

    for i in {1..100}
    do
        IP=$(internal_find_my_ip $i)
        [[ ! -z "$IP" ]] && { echo $IP ; return ; }
    done

    case $IP in
        127.*)
            echo "WARNING: vpnserver will use the localhost IP adress."
            echo "         vpnserver may not work properly"
        ;;
    esac
    # just in case (never happends but I am paranoid)
    return "127.0.0.1"
}

containers_clean() {
    echo "** Cleaning"
}

containers_status() {
    echo "** Docker images & Wireguard VPN status"
    cd "$basedir/envs/vpn/docker"

    ERROR=0
    echo -n "- running containers -> "
    status=$(docker ps | grep fedbiomed/vpn- | wc -l)

    if [ $status -eq 3 ]; then
        echo "OK"
    else
        echo "BROKEN"
        ERROR=1
    fi


    if [ $ERROR -eq 1 ]; then
        echo "at least one of the requested docker container is not running"
        docker ps
        return
    fi

    # ping inside the wg vpn
    for c in vpnserver mqtt restful
    do
        echo -n "- pinging VPN server from $c container -> "
        ping=$(docker-compose exec ${c} ping -n -c 3 -W 1 10.220.0.1 2>/dev/null | cat -v)

        status=$(echo $ping|grep seq=)
        if [ -z "$status" ]; then
            echo "BROKEN"
            ERROR=1
        else
            echo "OK"
        fi
    done

    if [ $ERROR -eq 1 ]; then
        echo "Something is BRoKeN here.  You must check what is going on..."
        echo "(either docker images are not running properly or wiregard not configured)"
    fi
}

containers_build() {
    echo "** Building docker VPN images"
    cd "$basedir/envs/vpn/docker"

    echo "- building base component"
    CONTAINER_UID=$(id -u) CONTAINER_GID=$(id -g) CONTAINER_USER=$(id -un) CONTAINER_GROUP=$(id -gn) docker-compose build base

    echo "- building vpn server"
    CONTAINER_UID=$(id -u) CONTAINER_GID=$(id -g) CONTAINER_USER=$(id -un) CONTAINER_GROUP=$(id -gn) docker-compose build vpnserver

    echo "- building mqtt server"
    CONTAINER_UID=$(id -u) CONTAINER_GID=$(id -g) CONTAINER_USER=$(id -un) CONTAINER_GROUP=$(id -gn)  docker-compose build mqtt

    echo "- building restful server"
    CONTAINER_UID=$(id -u) CONTAINER_GID=$(id -g) CONTAINER_USER=$(id -un) CONTAINER_GROUP=$(id -gn)  docker-compose build restful
}

containers_stop() {
    echo "** Stopping cocker VPN components"
    cd "$basedir/envs/vpn/docker"
    docker-compose stop
}

containers_configure() {
    echo "** Generating Wireguards keys"

    cd "$basedir/envs/vpn/docker"

    # replace IP in VPN main config file
    CONFIG="$basedir/envs/vpn/docker/vpnserver/run_mounts/config/config.env"
    IP=$(find_my_ip)

    git checkout $CONFIG
    sed -i -XXX "s:replace_with.myserver.mydomain:$IP:" $CONFIG && /bin/rm ${CONFIG}-XXX

    # start vpn server to generate config files
    docker-compose up -d vpnserver

    /bin/rm -fr ./vpnserver/run_mounts/config/config_peers 2> /dev/null
    sleep 1 # sometimes the container volumes are not up to date immediately

    # mqtt configuration file
    docker-compose exec vpnserver python ./vpn/bin/configure_peer.py genconf management mqtt
    sed -i -XXX "s:replace_with.myserver.mydomain:$IP:" ./vpnserver/run_mounts/config/config_peers/management/mqtt/config.env
    /bin/rm ./vpnserver/run_mounts/config/config_peers/management/mqtt/config.env-XXX
    /bin/cp ./vpnserver/run_mounts/config/config_peers/management/mqtt/config.env ./mqtt/run_mounts/config/config.env

    # restful config file
    docker-compose exec vpnserver python ./vpn/bin/configure_peer.py genconf management restful
    sed -i -XXX "s:replace_with.myserver.mydomain:$IP:" ./vpnserver/run_mounts/config/config_peers/management/restful/config.env
    /bin/rm ./vpnserver/run_mounts/config/config_peers/management/restful/config.env-XXX
    /bin/cp ./vpnserver/run_mounts/config/config_peers/management/restful/config.env ./restful/run_mounts/config/config.env

    # researcher config file
    docker-compose exec vpnserver python ./vpn/bin/configure_peer.py genconf researcher researcher1
    sed -i -XXX "s:replace_with.myserver.mydomain:$IP:" ./vpnserver/run_mounts/config/config_peers/researcher/researcher1/config.env
    /bin/rm ./vpnserver/run_mounts/config/config_peers/researcher/researcher1/config.env-XXX
    /bin/cp ./vpnserver/run_mounts/config/config_peers/researcher/researcher1/config.env ./researcher/run_mounts/config/config.env

    # nodes config files
    for (( i = 1; i <= NODE_NUMBER; ++i ))
    do
        n="node${i}"
        docker-compose exec vpnserver python ./vpn/bin/configure_peer.py genconf node ${n}
        sed -i -XXX "s:replace_with.myserver.mydomain:$IP:" ./vpnserver/run_mounts/config/config_peers/node/${n}/config.env
        /bin/rm ./vpnserver/run_mounts/config/config_peers/node/${n}/config.env-XXX
        /bin/cp ./vpnserver/run_mounts/config/config_peers/node/${n}/config.env node/run_mounts/config/config.env
    done
    containers_stop
}

containers_start() {
    echo "** STARTING components"

    cd "$basedir/envs/vpn/docker"

    # verify IP in config file
    CONFIG="$basedir/envs/vpn/docker/vpnserver/run_mounts/config/config.env"
    IP=$(find_my_ip)

    ip_in_file=$(grep "^VPN_SERVER_PUBLIC_ADDR=$IP$" $CONFIG)
    if [ -z "$ip_in_file" ]; then
        echo "** external IP adress has changed since last configuration"
        echo "You may need to run:  ${0##*/} configure"
        exit 1
    fi

    # start servers
    docker-compose up -d vpnserver
    docker-compose up -d mqtt
    docker-compose up -d restful

    # propagate wiregard keys
    for c in mqtt restful
    do
        pubkey=$(docker-compose exec ${c} wg show wg0 public-key | tr -d '\r')
        docker-compose exec vpnserver python ./vpn/bin/configure_peer.py add management ${c} $pubkey
    done

    containers_status
}

# main
# ----

# detect topdir
basedir=$(cd $(dirname $0)/.. || exit ; pwd)
cd $basedir || exit

#
CLEAN=0
BUILD=0
CONFIGURE=0
START=0
STOP=0
NODE_NUMBER=1
GPU=0
APPROVAL=0

# must provide at least an option
if [ $# -eq 0 ]; then
    echo "must provide an option"

    usage
    exit 1
fi

# arguments decoding
while (($# > 0)); do
    case $1 in

        build)
            BUILD=1
            shift
            while (($# > 0)); do
                case $1 in
                    -c|--clean) CLEAN=1 ;;
                    -g|--gpu)   GPU=1 ;;
                    -h|--help)  usage ; exit 0 ;;
                    *)
                        echo "unknown or incompatible arguments"
                        usage
                        exit 1
                        ;;
                esac
                shift
            done
            ;;

        config*)
            CONFIGURE=1
            shift
            while (($# > 0)); do
                case $1 in
                    -h|--help)          usage ; exit 0 ;;
                    -c|--clean) CLEAN=1 ;;

                    # -n)
                    #     NODE_NUMBER=$2
                    #     shift
                    #     NODE_NUMBER=$(echo $NODE_NUMBER | egrep -e '^[1-9][0-9]*$')
                    #     if [ -z "$NODE_NUMBER" ]; then
                    #         echo "node number must be a positive integer"
                    #         usage
                    #         exit 1
                    #      fi
                    #      ;;
                    *)
                        echo "unknown or incompatible arguments"
                        usage
                        exit 1
                        ;;
                esac
                shift
            done
            ;;


        start)
            START=1
            shift
            while (($# > 0)); do
                case $1 in
                    -h|--help)          usage ; exit 0 ;;
                    -m|--model-approval) APPROVAL=1 ;;
                    *)
                        echo "unknown or incompatible arguments"
                        usage
                        exit 1
                        ;;
                esac
                shift
            done
            ;;

        stop)
            STOP=1
            shift
            while (($# > 0)); do
                case $1 in
                    -h|--help)          usage ; exit 0 ;;
                    -m|--model-approval) APPROVAL=1 ;;
                    *)
                        echo "unknown or incompatible arguments"
                        usage
                        exit 1
                        ;;
                esac
                shift
            done
            ;;
        status)
            STATUS=1
            shift
            while (($# > 0)); do
                case $1 in
                    -h|--help)          usage ; exit 0 ;;
                    *)
                        echo "unknown or incompatible arguments"
                        usage
                        exit 1
                        ;;
                esac
                shift
            done
            ;;
        *)
            echo "unknown or incompatible option: $1"
            usage
            exit 1
            ;;
    esac
    shift
done


# start doing something usefull
# -----------------------------
[[ $CLEAN -eq 1 ]]     && { containers_clean; }
[[ $BUILD -eq 1 ]]     && { containers_build; }
[[ $CONFIGURE -eq 1 ]] && { containers_configure; }
[[ $START -eq 1 ]]     && { containers_start; }
[[ $STOP -eq 1 ]]      && { containers_stop; }
[[ $STATUS -eq 1 ]]    && { containers_status; }

exit 0
